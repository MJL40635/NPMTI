{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>This site offers guidance technical guidance for data processes related to the National Predictive modeleing Tool Initiative (NPMTI).</p>"},{"location":"guides/collecting_data/","title":"Collecting data","text":""},{"location":"guides/weather_data/fetch/","title":"Historical Weather Data Processing","text":""},{"location":"guides/weather_data/fetch/#overview","title":"Overview","text":"<p>The Weather Data Fetcher is a Python script designed to fetch and update weather data from the NASA POWER API and store it in a MongoDB database. It intelligently updates existing records, checks for new data, and ensures that the most recent weather data is available. The script supports both full data processing and a test mode for processing a subset of locations.</p>"},{"location":"guides/weather_data/fetch/#features","title":"Features","text":"<ul> <li> <p>Automated Data Fetching: Retrieves weather data for specified parameters from the NASA POWER API.  </p> </li> <li> <p>Incremental Updates: Updates existing records and inserts new ones, avoiding redundant data pulls.  </p> </li> <li> <p>Parallel Processing: Utilizes multithreading to process multiple locations concurrently.  </p> </li> <li> <p>Retry Mechanism: Implements retry logic with exponential backoff to handle transient API errors.  </p> </li> <li> <p>Configurable: Allows customization through a config.yaml file and command-line arguments.  </p> </li> <li> <p>Logging: Provides detailed logs for monitoring and debugging.  </p> </li> </ul>"},{"location":"guides/weather_data/fetch/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python: Version 3.6 or higher.</li> <li>MongoDB: Access to a MongoDB database (local or cloud-hosted).</li> <li>Python Packages: <pre><code>requests\npymongo\ntenacity\nPyYAML\n</code></pre></li> </ul>"},{"location":"guides/weather_data/fetch/#installation","title":"Installation","text":"<ol> <li> <p>Clone the Repository   <pre><code>git clone https://github.com/yourusername/weather-data-fetcher.git\ncd weather-data-fetcher\n</code></pre></p> </li> <li> <p>Create a Virtual Environment (Optional but Recommended) On Unix/Linux/macOS <pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre> On Windows <pre><code>python -m venv venv\nvenv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install Required Packages   <pre><code>pip install -r requirements.txt\n</code></pre>   If requirements.txt does not exist, install packages manually:   <pre><code>pip install requests pymongo tenacity PyYAML\n</code></pre></p> </li> <li> <p>Set Up MongoDB Local MongoDB:     Install MongoDB Community Edition from the official website.     Start the MongoDB service Cloud MongoDB (e.g., MongoDB Atlas):     Sign up for a free account on MongoDB Atlas.     Create a cluster and obtain the connection string (URI).</p> </li> <li> <p>Configure Environment Variables   Set the MONGODB_URI environment variable with your MongoDB connection string.   <pre><code># On Unix/Linux/macOS\nexport MONGODB_URI='your_mongodb_connection_string_here'\n\n# On Windows Command Prompt\nset MONGODB_URI='your_mongodb_connection_string_here'\n\n# On Windows PowerShell\n$env:MONGODB_URI='your_mongodb_connection_string_here'\n</code></pre></p> </li> <li> <p>Create config.yaml File   Create a config.yaml file in the project directory with the following content:   <pre><code>  mongodb_uri: 'your_mongodb_connection_string_here'\n  re_fetch_days: 7\n  test_mode: false\n  test_counties:\n    - '01001'  # Autauga County, AL\n    - '06037'  # Los Angeles County, CA\n  parameters:\n    - 'T2M'\n    - 'WD2M'\n    - 'WS2M'\n    - 'PS'\n    - 'GWETROOT'\n    - 'TS'\n    - 'CDD0'\n    - 'CDD18_3'\n    - 'CDD10'\n    - 'CLOUD_AMT'\n    - 'EVLAND'\n    - 'ALLSKY_SFC_PAR_TOT'\n    - 'PRECTOTCORR'\n  max_workers: 5  # For parallel processing\n</code></pre>     Replace 'your_mongodb_connection_string_here' with your actual MongoDB URI</p> <p>Adjust test_counties with the FIPS codes relevant to your test cases.</p> <p>Modify other parameters as needed.</p> </li> <li> <p>Prepare the MongoDB Collections</p> <p>Ensure that your MongoDB database contains the necessary collections:</p> <ul> <li> <p>county_data: Contains county information with fields like county_name, state_name, fips_code, latitude, and longitude.</p> </li> <li> <p>weather_data: Will be used by the script to store weather data.</p> </li> </ul> <p>If you don't have the county_data collection, you need to populate it with the required county data.</p> </li> </ol>"},{"location":"guides/weather_data/fetch/#usage","title":"Usage","text":"<p>Command-Line Arguments</p> <p>The script supports the following command-line arguments: --config: Path to the configuration file (default: config.yaml). --test: Run the script in test mode using counties specified in test_counties. --re-fetch-days: Number of days to re-fetch for updates (overrides config.yaml). --max-workers: Maximum number of worker threads (overrides config.yaml).</p> <p>Running the Script</p> <ol> <li>Standard Execution To run the script with default settings: <pre><code>python fetch.py\n</code></pre></li> <li>Test Mode Execution To run the script in test mode: <pre><code>python fetch.py --test\n</code></pre></li> <li>Custom Configuration File If you have a custom configuration file: <pre><code>python fetch.py --config path/to/your_config.yaml\n</code></pre></li> <li>Override Configuration Parameters To override re_fetch_days and max_workers: <pre><code>python fetch.py --re-fetch-days 10 --max-workers 3\n</code></pre></li> <li>Display Help To see all available options: <pre><code>python fetch.py --help\n</code></pre></li> </ol> <p>Example Usage</p> <p>Run in Test Mode with Specific Counties Update config.yaml: <pre><code>test_mode: true\ntest_counties:\n  - '01001'  # Autauga County, AL\n  - '06037'  # Los Angeles County, CA\n</code></pre> Run the script: <pre><code>python fetch.py\n</code></pre> Run with Custom Parameters <pre><code>python fetch.py --re-fetch-days 14 --max-workers 10\n</code></pre></p>"},{"location":"guides/weather_data/fetch/#configuration-details","title":"Configuration Details","text":"<p>config.yaml Parameters</p> <ul> <li> <p>mongodb_uri: MongoDB connection string (can also be set via the MONGODB_URI environment variable).</p> </li> <li> <p>re_fetch_days: Number of days to re-fetch data for updates (default: 7).</p> </li> <li> <p>test_mode: Set to true to run the script in test mode.</p> </li> <li> <p>test_counties: List of FIPS codes to process when in test mode.</p> </li> <li> <p>parameters: List of weather parameters to fetch from the NASA POWER API.</p> </li> <li> <p>max_workers: Maximum number of concurrent threads for processing (default: 5).</p> </li> </ul> <p>Adjusting Parameters</p> <ul> <li> <p>Adding New Weather Parameters: Simply add the parameter name to the parameters list in config.yaml. The script will automatically handle the new parameter.</p> </li> <li> <p>Changing Fetch Range: Modify re_fetch_days to adjust how many days back the script should check for updates.</p> </li> <li> <p>Thread Management: Increase or decrease max_workers based on your system's capabilities and the NASA POWER API's rate limits.</p> </li> </ul> <p>Logging</p> <ul> <li> <p>Log File: The script logs detailed information to weather_data.log.</p> </li> <li> <p>Logging Levels: Adjust the logging level in the script (logging.basicConfig) if you need more or less verbosity.</p> </li> <li> <p>Monitoring Execution: Check the log file to monitor progress and debug any issues.</p> </li> </ul>"},{"location":"guides/weather_data/fetch/#troubleshooting","title":"Troubleshooting","text":"<p>Common Issues</p> <ol> <li> <p>No Counties Found to Process</p> <p>If you see: <pre><code>No counties found to process. Exiting script.\n</code></pre></p> <p>Ensure that test_counties in config.yaml contains valid FIPS codes present in your county_data_test collection.</p> <p>Verify that fips_code in your database matches the data type (string or integer) used in test_counties.</p> </li> <li> <p>MongoDB Connection Error</p> <p>Confirm that the mongodb_uri is correct and accessible.</p> <p>Check network configurations and firewall settings.</p> <p>Ensure that your MongoDB service is running.</p> </li> <li> <p>API Request Failures</p> <p>The NASA POWER API might be experiencing downtime or rate limiting.</p> <p>Check your internet connection.</p> <p>Review the log file for specific error messages.</p> </li> </ol> <p>Getting More Debug Information</p> <p>Set the logging level to DEBUG for more detailed logs: <pre><code>logging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s %(levelname)s:%(message)s',\n    handlers=[\n        logging.FileHandler('weather_data.log'),\n        logging.StreamHandler(sys.stdout)\n    ]\n)\n</code></pre> Run the script and review weather_data.log for detailed information.</p> <p>Scheduling Runs</p> <p>Use a task scheduler like cron (Unix/Linux) or Task Scheduler (Windows) to run the script daily or at your desired frequency.</p> <p>Contributing</p> <p>If you wish to contribute:</p> <p>Fork the Repository: Create your own fork of the project.</p> <p>Create a Branch: Work on your feature or bug fix in a new branch.</p> <p>Submit a Pull Request: Describe your changes and submit a pull request for review.</p>"},{"location":"guides/weather_data/fetch/#contact","title":"Contact","text":"<p>For questions or support, please contact:</p> <p>michael.lavelle@mesur.io</p>"}]}